# Copy and show progress with pv
cpv () {
  tar cf - "$1" |  pv -s $(du -s "$1" | awk '{print $1*1000}' | awk '{printf("%d\n",$0+=$0<0?-0.5:0.5)}') | (cd "$2";tar xf -)
}

# COMPLETELY PURGE a file from a git repo, INCLUDING THE WORKING TREE
ungit () {
    git filter-branch --force --index-filter  'git rm --cached --ignore-unmatch "$1"' --prune-empty --tag-name-filter cat -- --all
}

github(){
    open "$(hub compare -u)?expand=1"
}

calc(){
    echo "scale=3; $@" | bc
}

mkcdir() {
  mkdir -p -- "$1" &&
  cd -P -- "$1"
}

nastyssh() {
  # run this after you get the infamous "IT IS POSSIBLE SOMEBODY IS DOING SOMETHING NASTY" ssh error
  sed -i "" "${1}d" /Users/bjacobel/.ssh/known_hosts
}

title() {
  echo -ne "\033]0;"$*"\007"
}

atime() {
  # find the average time to run a command for n runs
  # usage: atime 5 curl https://google.com
  realtot=0
  usertot=0
  systot=0

  for ((i = 0; i < $1; i++)); do
    read real user sys <<< $({ time ${@:2}; } 2>&1 | pcregrep -o1 "\dm(\d\.\d\d\d)s")
    realtot=$(calc $realtot + $real)
    usertot=$(calc $usertot + $user)
    systot=$(calc $systot + $sys)
  done

  echo "averaging $1 runs:"
  echo "real: $(calc $realtot / $1) sec"
  echo "user: $(calc $usertot / $1) sec"
  echo "sys: $(calc $systot / $1) sec"
}

forever() {
  while "${@:1}"; do :; done
}

versions() {
  yarn info $1 --json | jq ".data.versions" -r
}

latest() {
  yarn info $1 --json | jq ".data[\"dist-tags\"].latest" -r
}

instances() {
  aws ec2 describe-instances --filter Name="tag:Name",Values="$1" | jq ".Reservations | map(.Instances[]) | map(.$2)"
}

kb() {
  numfmt --format "%.2f" --to=iec --suffix=B $(stat -f%z $1)
}

cdnkb() {
  numfmt --format "%.2f" --to=iec --suffix=B $(curl "$1" --silent --write-out '%{size_download}' --output /dev/null --compressed)
}

brkb() {
  set -e
  brotli -f -o /tmp/js.br $1
  kb /tmp/js.br
}

runtimedeps() {
  mothership run runtimedep-report --parameters="{\"targets\": [\"$1\"]}"
}

killi() {
  docker kill `docker ps -q --filter "$1"`
}

indir() {
  pushd $1 1>/dev/null
  ${@:2}
  popd 1>/dev/null
}

repo () {
  cd ~/code/$1 2>/dev/null || hub clone HubSpot/$1 ~/code/$1 2>/dev/null || hub clone HubSpotProtected/$1 ~/code/$1 2>/dev/null
  cd ~/code/$1
  echo -ne "\033]0;"$1"\007"
  (&>/dev/null bend yarn &)
}

freebase () {
  rm -rf /tmp/$1 2>/dev/null
  git clone git@git.hubteam.com:HubSpot/$1 /tmp/$1 2>/dev/null || \
  git clone git@git.hubteam.com:HubSpotProtected/$1 /tmp/$1 2>/dev/null
  pushd /tmp/$1 1>/dev/null
  git fetch origin $2:$2
  git checkout $2
  git rebase -i origin/master
  git push -f --set-upstream origin $2
  popd 1>/dev/null
}

bender-repackage-publish () {
  git clean -fdx
  bend yarn

  if test -f "node_modules/.bin/bender-repackage"; then
    echo "using old bender-repackage..."
    bend yarn bender-repackage build
    BPM_CONFIG=~/.bpm-config.json bend yarn bender-repackage publish
  else
    echo "using new reactor repackage..."
    BPM_CONFIG=~/.bpm-config.json bend reactor repackage --publish
  fi
}

bender-repackage () {
  git clean -fdx
  bend yarn

  if test -f "node_modules/.bin/bender-repackage"; then
    echo "using old bender-repackage..."
    bend yarn bender-repackage build
    bend yarn bender-repackage install
  else
    echo "using new reactor repackage..."
    bend reactor repackage
  fi
}